#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 Jolly <https://totoro.site>
# 
# <https://github.com/skytotwo/NanoPi-R1S-Build-By-Actions>
#
# Write by Jolly 2019/12/7
# last update at 2019/12/19

name: NanoPi-R1s H3 OpenWrt 19.07 Build

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          wget -O - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | bash         
          
      - name: Install Repo
        run: |
          git clone https://github.com/friendlyarm/repo
          sudo cp repo/repo /usr/bin/
          
      - name: Download Source
        run: |
          mkdir friendlywrt-h3
          cd friendlywrt-h3
          repo init -u https://github.com/friendlyarm/friendlywrt_manifests -b master -m h3.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle
      
      - name: Merge UpStearm OpenWrt
        run: |
          cd friendlywrt-h3
          cd .repo/manifests
          rm -f ./h3.xml
          wget https://raw.githubusercontent.com/djun/NanoPi-R1S-Build-By-Actions/master/source_xml/h3_19.07.xml
          cp h3_19.07.xml h3.xml
          rm -rf ./h3_19.07.xml
          repo sync -c  --no-clone-bundle
      
      - name: Merge LEDE
        run: |
          cd friendlywrt-h3
          git clone https://github.com/coolsnowwolf/lede
          cd friendlywrt
          cp -r ../lede/package/lean package/
          sed -i 's/https:\/\/git.openwrt.org\/project\/luci.git^039ef1f4deba725d3591b159bbc9569885d68131/https:\/\/github.com\/coolsnowwolf\/luci/' feeds.conf.default
          sed -i 's/https:\/\/git.openwrt.org\/feed\/packages.git^00803ffc91e80b16e9c1603ff32106d42e255923/https:\/\/github.com\/coolsnowwolf\/packages/' feeds.conf.default          
      
      - name: Custom Applications
        run: |
          cd friendlywrt-h3/friendlywrt/package
          git clone https://github.com/Baozisoftware/luci-app-koolproxy
          
      - name: Update Target.mk
        run: |
          cd friendlywrt-h3/friendlywrt/include 
          sed -i 's/dnsmasq /dnsmasq-full default-settings luci/' target.mk    
          
      - name: Update Feeds
        run: |
          cd friendlywrt-h3/friendlywrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Costom Configure File
        run: |
          cd friendlywrt-h3/friendlywrt
          rm -f ./.config*
          wget https://raw.githubusercontent.com/djun/NanoPi-R1S-Build-By-Actions/master/r1s-h3-config
          cp r1s-h3-config .config
      
      - name: Download package
        if: always()
        run: |
          cd friendlywrt-h3/friendlywrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: Build OpenWrt
        run: |
          cd friendlywrt-h3
          ./build.sh nanopi_r1s.mk
      
      - name: Zip Files
        run: |
          find friendlywrt-h3/out/ -name "FriendlyWrt_*img*" | xargs -i zip -r {}.zip {}
          
      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find friendlywrt-h3/out/ -name "FriendlyWrt_*img.zip*" | xargs -i mv -f {} ./artifact/
          cp friendlywrt-h3/friendlywrt/.config ./artifact/
          zip -r artifact.zip ./artifact/
          release_tag="NanoPi-R1S-H3-Lean-$(date +%Y-%m-%d)"
          echo "##[set-output name=release_tag;]$release_tag"
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.repo_access }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.repo_access }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifact.zip
          asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
          asset_content_type: application/zip
